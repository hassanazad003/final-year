// Code adapted from www.learnopengl.com, www.glfw.org
#include <iostream>

// GLEW
#define GLEW_STATIC
#include <GL/glew.h>

// GLFW
#include <GLFW/glfw3.h>

// Other Libs

// GLM Mathematics
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

// Other includes
#include "Shader.h"


// Function prototypes
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);

void do_movement();

// Window dimensions
const GLuint WIDTH = 640, HEIGHT = 640;

// Camera

// Camera
glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 4.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
GLfloat yaw = -90.0f;	// Yaw is initialized to -90.0 degrees since a yaw of 0.0 results in a direction vector pointing to the right (due to how Eular angles work) so we initially rotate a bit to the left.
GLfloat pitch = 0.0f;
GLfloat lastX = WIDTH / 2.0;
GLfloat lastY = HEIGHT / 2.0;
bool keys[1024];

// Deltatime
GLfloat deltaTime = 0.0f;	// Time between current frame and last frame
GLfloat lastFrame = 0.0f;  	// Time of last frame

// Light attributes
glm::vec3 lightPos(1.0f, 0.5f, 1.0f);
//glm::vec3 lightPos(-1.0f, 0.5f, 1.0f);

// The MAIN function, from here we start the application and run the game loop







int main(void)
{

	//++++create a glfw window+++++++++++++++++++++++++++++++++++++++
	GLFWwindow* window;

	if (!glfwInit()) //Initialize the library
		return -1;

	window = glfwCreateWindow(WIDTH, HEIGHT, "OpenGL Window", NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	glfwMakeContextCurrent(window);//Make the window's context current

	// Set the required callback functions
	glfwSetKeyCallback(window, key_callback);
	glfwSetCursorPosCallback(window, mouse_callback);
	// GLFW Options
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	//++++Initialize GLEW to setup the OpenGL Function pointers+++++++
	glewExperimental = GL_TRUE;
	glewInit();

	//++++Define the viewport dimensions++++++++++++++++++++++++++++
	glViewport(0, 0, HEIGHT, HEIGHT);

	// Setup OpenGL options
	glEnable(GL_DEPTH_TEST);


	// Build and compile our shader program
	GLuint shaderProgram = initShader("vert.glsl", "frag.glsl");
	GLuint lampshader = initShader("lampvert.glsl", "lampfrag.glsl");

	// Set up vertex data (and buffer(s)) and attribute pointers

	GLfloat cubeVertices[] = {
	-0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f,
	0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f,
	0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 0.0f,
	0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 0.0f,
	-0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 0.0f,
	-0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f,
	-0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 0.0f,
	0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 0.0f,
	0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f,
	0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f,
	-0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 0.0f,
	-0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 0.0f,
	-0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f,
	-0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f, 0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f, -0.5f, 0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f, 0.5f, 0.0f, 0.0f, 1.0f,
	-0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f,
	0.5f, 0.5f, 0.5f, 1.0f, 1.0f, 0.0f,
	0.5f, 0.5f, -0.5f, 1.0f, 1.0f, 0.0f,
	0.5f, -0.5f, -0.5f, 1.0f, 1.0f, 0.0f,
	0.5f, -0.5f, -0.5f, 1.0f, 1.0f, 0.0f,
	0.5f, -0.5f, 0.5f, 1.0f, 1.0f, 0.0f,
	0.5f, 0.5f, 0.5f, 1.0f, 1.0f, 0.0f,
	-0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 1.0f,
	0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 1.0f,
	0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f,
	0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f,
	-0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f,
	-0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 1.0f,
	-0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 1.0f,
	0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 1.0f,
	0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 1.0f,
	0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 1.0f,
	-0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 1.0f,
	-0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 1.0f
	};


	GLfloat vertices[] = {
		-0.45f, -1.2f, -0.5f,  0.0f,  0.0f, -1.0f,
		0.45f, -1.2f, -0.5f,  0.0f,  0.0f, -1.0f,
		0.35f,  -0.5f, -0.4f,  0.0f,  0.0f, -1.0f,
		0.35f,  -0.5f, -0.4f,  0.0f,  0.0f, -1.0f,
		-0.35f,  -0.5f, -0.4f,  0.0f,  0.0f, -1.0f,
		-0.45f, -1.2f, -0.5f,  0.0f,  0.0f, -1.0f,

		-0.45f, -1.2f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.45f, -1.2f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.35f,  -0.5f,  0.4f,  0.0f,  0.0f,  1.0f,
		0.35f,  -0.5f,  0.4f,  0.0f,  0.0f,  1.0f,
		-0.35f,  -0.5f,  0.4f,  0.0f,  0.0f,  1.0f,
		-0.45f, -1.2f,  0.5f,  0.0f,  0.0f,  1.0f,

		-0.35f,  -0.5f,  0.4f, -1.0f,  0.0f,  0.0f,
		-0.35f,  -0.5f, -0.4f, -1.0f,  0.0f,  0.0f,
		-0.45f, -1.2f, -0.5f, -1.0f,  0.0f,  0.0f,
		-0.45f, -1.2f, -0.5f, -1.0f,  0.0f,  0.0f,
		-0.45f, -1.2f,  0.5f, -1.0f,  0.0f,  0.0f,
		-0.35f,  -0.5f,  0.4f, -1.0f,  0.0f,  0.0f,

		0.35f,  -0.5f,  0.4f,  1.0f,  0.0f,  0.0f,
		0.35f,  -0.5f, -0.4f,  1.0f,  0.0f,  0.0f,
		0.45f, -1.2f, -0.5f,  1.0f,  0.0f,  0.0f,
		0.45f, -1.2f, -0.5f,  1.0f,  0.0f,  0.0f,
		0.45f, -1.2f,  0.5f,  1.0f,  0.0f,  0.0f,
		0.35f,  -0.5f,  0.4f,  1.0f,  0.0f,  0.0f,

		-0.45f, -1.2f, -0.5f,  0.0f, -1.0f,  0.0f,
		0.45f, -1.2f, -0.5f,  0.0f, -1.0f,  0.0f,
		0.45f, -1.2f,  0.5f,  0.0f, -1.0f,  0.0f,
		0.45f, -1.2f,  0.5f,  0.0f, -1.0f,  0.0f,
		-0.45f, -1.2f,  0.5f,  0.0f, -1.0f,  0.0f,
		-0.45f, -1.2f, -0.5f,  0.0f, -1.0f,  0.0f,

		0.35f,  -0.5f, -0.35f,  0.0f,  1.0f,  0.0f,
		-0.35f,  -0.5f, 0.4f,  0.0f,  1.0f,  0.0f,
		0.35f,  -0.5f,  0.4f,  0.0f,  1.0f,  0.0f,

		-0.35f,  -0.5f, 0.15f,  0.0f,  0.0f,  0.0f,
		-0.35f,  -0.5f, -0.4f,  0.0f,  0.0f,  0.0f,
		0.175f,  -0.5f,  -0.4f,  0.0f,  0.0f,  0.0f,




		//tinyTriangle
		-0.35f,  -0.5f, 0.4f,  0.0f,  1.0f,  0.0f,
		-0.35f,  -0.5f, 0.325f,  0.0f,  1.0f,  0.0f,
		-0.275f,  -0.5f,  0.325f,  0.0f,  1.0f,  0.0f,

		-0.275f,  -0.5f, 0.325f,  0.0f,  1.0f,  0.0f,
		-0.275f,  -0.5f, 0.25f,  0.0f,  1.0f,  0.0f,
		-0.2f,  -0.5f,  0.25f,  0.0f,  1.0f,  0.0f,

		-0.35f,  -0.5f, 0.225f,  0.0f,  1.0f,  0.0f,
		-0.35f,  -0.5f, 0.2f,  0.0f,  1.0f,  0.0f,
		-0.25f,  -0.5f,  0.25f,  0.0f,  1.0f,  0.0f,

		-0.35f,  -0.5f, 0.225f,  0.0f,  1.0f,  0.0f,
		-0.25f,  -0.5f,  0.25f,  0.0f,  1.0f,  0.0f,
		-0.25f,  -0.5f,  0.29f,  0.0f,  1.0f,  0.0f,

		-0.35f,  -0.5f, 0.315f,  0.0f,  1.0f,  0.0f,
		-0.35f,  -0.5f,  0.35f,  0.0f,  1.0f,  0.0f,
		-0.1f,  -0.5f,  0.39f,  0.0f,  1.0f,  0.0f,

		-0.35f,  -0.5f, 0.225f,  0.0f,  0.0f,  0.0f,
		-0.35f,  -0.5f,  0.315f,  0.0f,  0.0f,  0.0f,
		-0.275f,  -0.5f,  0.275f,  0.0f,  0.0f,  0.0f,

		-0.325f,  -0.5f, 0.325f,  0.0f,  0.0f,  0.0f,
		-0.35f,  -0.5f,  0.315f,  0.0f,  0.0f,  0.0f,
		-0.3f,  -0.5f,  0.27f,  0.0f,  0.0f,  0.0f,

		0.175f,  -0.5f,  -0.4f,  0.0f,  1.0f,  0.0f,
		0.235f,  -0.5f,  -0.4f,  0.0f,  1.0f,  0.0f,
		0.35f,  -0.5f,  -0.05f,  0.0f,  1.0f,  0.0f,

	};




	GLfloat middle[] = {
	-0.25f, -0.5f, -0.25f,  0.0f,  0.0f, -1.0f,
	0.25f, -0.5f, -0.25f,  0.0f,  0.0f, -1.0f,
	0.25f,  0.4f, -0.25f,  0.0f,  0.0f, -1.0f,
	0.25f,  0.4f, -0.25f,  0.0f,  0.0f, -1.0f,
	-0.25f,  0.4f, -0.25f,  0.0f,  0.0f, -1.0f,
	-0.25f, -0.5f, -0.25f,  0.0f,  0.0f, -1.0f,

	-0.25f, -0.5f,  0.25f,  0.0f,  0.0f,  1.0f,
	0.25f, -0.5f,  0.25f,  0.0f,  0.0f,  1.0f,
	0.25f,  0.4f,  0.25f,  0.0f,  0.0f,  1.0f,
	0.25f,  0.4f,  0.25f,  0.0f,  0.0f,  1.0f,
	-0.25f,  0.4f,  0.25f,  0.0f,  0.0f,  1.0f,
	-0.25f, -0.5f,  0.25f,  0.0f,  0.0f,  1.0f,

	-0.25f,  0.4f,  0.25f, -1.0f,  0.0f,  0.0f,
	-0.25f,  0.4f, -0.25f, -1.0f,  0.0f,  0.0f,
	-0.25f, -0.5f, -0.25f, -1.0f,  0.0f,  0.0f,
	-0.25f, -0.5f, -0.25f, -1.0f,  0.0f,  0.0f,
	-0.25f, -0.5f,  0.25f, -1.0f,  0.0f,  0.0f,
	-0.25f,  0.4f,  0.25f, -1.0f,  0.0f,  0.0f,

	0.25f,  0.4f,  0.25f,  1.0f,  0.0f,  0.0f,
	0.25f,  0.4f, -0.25f,  1.0f,  0.0f,  0.0f,
	0.25f, -0.5f, -0.25f,  1.0f,  0.0f,  0.0f,
	0.25f, -0.5f, -0.25f,  1.0f,  0.0f,  0.0f,
	0.25f, -0.5f,  0.25f,  1.0f,  0.0f,  0.0f,
	0.25f,  0.4f,  0.25f,  1.0f,  0.0f,  0.0f,

	-0.25f, -0.5f, -0.25f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f, -0.25f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f,  0.25f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f,  0.25f,  0.0f, -1.0f,  0.0f,
	-0.25f, -0.5f,  0.25f,  0.0f, -1.0f,  0.0f,
	-0.25f, -0.5f, -0.25f,  0.0f, -1.0f,  0.0f,

	-0.25f,  0.4f, -0.25f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f, -0.25f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f,  0.25f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f,  0.25f,  0.0f,  1.0f,  0.0f,
	-0.25f,  0.4f,  0.25f,  0.0f,  1.0f,  0.0f,
	-0.25f,  0.4f, -0.25f,  0.0f,  1.0f,  0.0f
	};



	GLfloat dome[] = {
	-0.45f, 0.4f, -0.4f,  0.0f,  0.0f, -1.0f,
	0.45f, 0.4f, -0.4f,  0.0f,  0.0f, -1.0f,
	0.0f,  0.8f, 0.0f,  0.0f,  0.0f, -1.0f,


	-0.45f, 0.4f,  0.4f,  0.0f,  0.0f,  1.0f,
	0.45f, 0.4f,  0.4f,  0.0f,  0.0f,  1.0f,
	0.0f,  0.8f,  0.0f,  0.0f,  0.0f,  1.0f,


	-0.45f,  0.4f,  0.4f, -1.0f,  0.0f,  0.0f,
	0.0f,  0.8f, 0.0f, -1.0f,  0.0f,  0.0f,
	-0.45f, 0.4f, -0.4f, -1.0f,  0.0f,  0.0f,


	0.45f,  0.4f,  0.4f,  1.0f,  0.0f,  0.0f,
	0.0f,  0.8f, 0.0f,  1.0f,  0.0f,  0.0f,
	0.45f, 0.4f, -0.4f,  1.0f,  0.0f,  0.0f,


	-0.45f,  0.4f, -0.4f,  0.0f,  -1.0f,  0.0f,
	0.45f,  0.4f, -0.4f,  0.0f,  -1.0f,  0.0f,
	0.45f,  0.4f,  0.4f,  0.0f,  -1.0f,  0.0f,
	0.45f,  0.4f,  0.4f,  0.0f,  -1.0f,  0.0f,
	-0.45f,  0.4f,  0.4f,  0.0f,  -1.0f,  0.0f,
	-0.45f,  0.4f, -0.4f,  0.0f,  -1.0f,  0.0f

	};


	GLfloat pillarLeftFront[] = {
	-0.325f, -0.5f, 0.275f,  0.0f,  0.0f, -1.0f,
	-0.275f, -0.5f, 0.275f,  0.0f,  0.0f, -1.0f,
	-0.275f,  0.4f, 0.275f,  0.0f,  0.0f, -1.0f,
	-0.275f,  0.4f, 0.275f,  0.0f,  0.0f, -1.0f,
	-0.325f,  0.4f, 0.275f,  0.0f,  0.0f, -1.0f,
	-0.325f, -0.5f, 0.275f,  0.0f,  0.0f, -1.0f,

	-0.325f, -0.5f,  0.325f,  0.0f,  0.0f,  1.0f,
	-0.275f, -0.5f,  0.325f,  0.0f,  0.0f,  1.0f,
	-0.275f,  0.4f,  0.325f,  0.0f,  0.0f,  1.0f,
	-0.275f,  0.4f,  0.325f,  0.0f,  0.0f,  1.0f,
	-0.325f,  0.4f,  0.325f,  0.0f,  0.0f,  1.0f,
	-0.325f, -0.5f,  0.325f,  0.0f,  0.0f,  1.0f,

	-0.325f,  0.4f,  0.325f, -1.0f,  0.0f,  0.0f,
	-0.325f,  0.4f, 0.275f, -1.0f,  0.0f,  0.0f,
	-0.325f, -0.5f, 0.275f, -1.0f,  0.0f,  0.0f,
	-0.325f, -0.5f, 0.275f, -1.0f,  0.0f,  0.0f,
	-0.325f, -0.5f,  0.325f, -1.0f,  0.0f,  0.0f,
	-0.325f,  0.4f,  0.325f, -1.0f,  0.0f,  0.0f,

	-0.275f,  0.4f,  0.325f,  1.0f,  0.0f,  0.0f,
	-0.275f,  0.4f, 0.275f,  1.0f,  0.0f,  0.0f,
	-0.275f, -0.5f, 0.275f,  1.0f,  0.0f,  0.0f,
	-0.275f, -0.5f, 0.275f,  1.0f,  0.0f,  0.0f,
	-0.275f, -0.5f,  0.325f,  1.0f,  0.0f,  0.0f,
	-0.275f,  0.4f,  0.325f,  1.0f,  0.0f,  0.0f,

	-0.325f, -0.5f, 0.275f,  0.0f, -1.0f,  0.0f,
	-0.275f, -0.5f, 0.275f,  0.0f, -1.0f,  0.0f,
	-0.275f, -0.5f,  0.325f,  0.0f, -1.0f,  0.0f,
	-0.275f, -0.5f,  0.325f,  0.0f, -1.0f,  0.0f,
	-0.325f, -0.5f,  0.325f,  0.0f, -1.0f,  0.0f,
	-0.325f, -0.5f, 0.275f,  0.0f, -1.0f,  0.0f,

	-0.325f,  0.4f, 0.275f,  0.0f,  1.0f,  0.0f,
	-0.275f,  0.4f, 0.275f,  0.0f,  1.0f,  0.0f,
	-0.275f,  0.4f,  0.325f,  0.0f,  1.0f,  0.0f,
	-0.275f,  0.4f,  0.325f,  0.0f,  1.0f,  0.0f,
	-0.325f,  0.4f,  0.325f,  0.0f,  1.0f,  0.0f,
	-0.325f,  0.4f, 0.275f,  0.0f,  1.0f,  0.0f
	};


	GLfloat pillarRightFront[] = {
	0.325f, -0.5f, 0.275f,  0.0f,  0.0f, -1.0f,
	0.275f, -0.5f, 0.275f,  0.0f,  0.0f, -1.0f,
	0.275f,  0.4f, 0.275f,  0.0f,  0.0f, -1.0f,
	0.275f,  0.4f, 0.275f,  0.0f,  0.0f, -1.0f,
	0.325f,  0.4f, 0.275f,  0.0f,  0.0f, -1.0f,
	0.325f, -0.5f, 0.275f,  0.0f,  0.0f, -1.0f,

	0.325f, -0.5f,  0.325f,  0.0f,  0.0f,  1.0f,
	0.275f, -0.5f,  0.325f,  0.0f,  0.0f,  1.0f,
	0.275f,  0.4f,  0.325f,  0.0f,  0.0f,  1.0f,
	0.275f,  0.4f,  0.325f,  0.0f,  0.0f,  1.0f,
	0.325f,  0.4f,  0.325f,  0.0f,  0.0f,  1.0f,
	0.325f, -0.5f,  0.325f,  0.0f,  0.0f,  1.0f,

	0.325f,  0.4f,  0.325f, 1.0f,  0.0f,  0.0f,
	0.325f,  0.4f, 0.275f, 1.0f,  0.0f,  0.0f,
	0.325f, -0.5f, 0.275f, 1.0f,  0.0f,  0.0f,
	0.325f, -0.5f, 0.275f, 1.0f,  0.0f,  0.0f,
	0.325f, -0.5f,  0.325f, 1.0f,  0.0f,  0.0f,
	0.325f,  0.4f,  0.325f, 1.0f,  0.0f,  0.0f,

	0.275f,  0.4f,  0.325f,  -1.0f,  0.0f,  0.0f,
	0.275f,  0.4f, 0.275f,  -1.0f,  0.0f,  0.0f,
	0.275f, -0.5f, 0.275f,  -1.0f,  0.0f,  0.0f,
	0.275f, -0.5f, 0.275f,  -1.0f,  0.0f,  0.0f,
	0.275f, -0.5f,  0.325f,  -1.0f,  0.0f,  0.0f,
	0.275f,  0.4f,  0.325f,  -1.0f,  0.0f,  0.0f,

	0.325f, -0.5f, 0.275f,  0.0f, -1.0f,  0.0f,
	0.275f, -0.5f, 0.275f,  0.0f, -1.0f,  0.0f,
	0.275f, -0.5f,  0.325f,  0.0f, -1.0f,  0.0f,
	0.275f, -0.5f,  0.325f,  0.0f, -1.0f,  0.0f,
	0.325f, -0.5f,  0.325f,  0.0f, -1.0f,  0.0f,
	0.325f, -0.5f, 0.275f,  0.0f, -1.0f,  0.0f,

	0.325f,  0.4f, 0.275f,  0.0f,  1.0f,  0.0f,
	0.275f,  0.4f, 0.275f,  0.0f,  1.0f,  0.0f,
	0.275f,  0.4f,  0.325f,  0.0f,  1.0f,  0.0f,
	0.275f,  0.4f,  0.325f,  0.0f,  1.0f,  0.0f,
	0.325f,  0.4f,  0.325f,  0.0f,  1.0f,  0.0f,
	0.325f,  0.4f, 0.275f,  0.0f,  1.0f,  0.0f
	};





	GLfloat pillarLeftBack[] = {
	-0.325f, -0.5f, -0.275f,  0.0f,  0.0f, 0.0f,
	-0.275f, -0.5f, -0.275f,  0.0f,  0.0f, 0.0f,
	-0.275f,  0.4f, -0.275f,  0.0f,  0.0f, 0.0f,
	-0.275f,  0.4f, -0.275f,  0.0f,  0.0f, 0.0f,
	-0.325f,  0.4f, -0.275f,  0.0f,  0.0f, 0.0f,
	-0.325f, -0.5f, -0.275f,  0.0f,  0.0f, 0.0f,

	-0.325f, -0.5f,  -0.325f,  0.0f,  0.0f,  -0.0f,
	-0.275f, -0.5f,  -0.325f,  0.0f,  0.0f,  -0.0f,
	-0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  -0.0f,
	-0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  -0.0f,
	-0.325f,  0.4f,  -0.325f,  0.0f,  0.0f,  -0.0f,
	-0.325f, -0.5f,  -0.325f,  0.0f,  0.0f,  -0.0f,

	-0.325f,  0.4f,  -0.325f, -0.0f,  0.0f,  0.0f,
	-0.325f,  0.4f, -0.275f, -0.0f,  0.0f,  0.0f,
	-0.325f, -0.5f, -0.275f, -0.0f,  0.0f,  0.0f,
	-0.325f, -0.5f, -0.275f, -0.0f,  0.0f,  0.0f,
	-0.325f, -0.5f,  -0.325f, -0.0f,  0.0f,  0.0f,
	-0.325f,  0.4f,  -0.325f, -0.0f,  0.0f,  0.0f,

	-0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,
	-0.275f,  0.4f, -0.275f,  0.0f,  0.0f,  0.0f,
	-0.275f, -0.5f, -0.275f,  0.0f,  0.0f,  0.0f,
	-0.275f, -0.5f, -0.275f,  0.0f,  0.0f,  0.0f,
	-0.275f, -0.5f,  -0.325f,  0.0f,  0.0f,  0.0f,
	-0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,

	-0.325f, -0.5f, -0.275f,  0.0f, -0.0f,  0.0f,
	-0.275f, -0.5f, -0.275f,  0.0f, -0.0f,  0.0f,
	-0.275f, -0.5f,  -0.325f,  0.0f, -0.0f,  0.0f,
	-0.275f, -0.5f,  -0.325f,  0.0f, -0.0f,  0.0f,
	-0.325f, -0.5f,  -0.325f,  0.0f, -0.0f,  0.0f,
	-0.325f, -0.5f, -0.275f,  0.0f, -0.0f,  0.0f,

	-0.325f,  0.4f, -0.275f,  0.0f,  0.0f,  0.0f,
	-0.275f,  0.4f, -0.275f,  0.0f,  0.0f,  0.0f,
	-0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,
	-0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,
	-0.325f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,
	-0.325f,  0.4f, -0.275f,  0.0f,  0.0f,  0.0f
	

	};


	GLfloat pillarRightBack[] = {
	0.325f, -0.5f, -0.275f,  0.0f,  0.0f, 1.0f,
	0.275f, -0.5f, -0.275f,  0.0f,  0.0f, 1.0f,
	0.275f,  0.4f, -0.275f,  0.0f,  0.0f, 1.0f,
	0.275f,  0.4f, -0.275f,  0.0f,  0.0f, 1.0f,
	0.325f,  0.4f, -0.275f,  0.0f,  0.0f, 1.0f,
	0.325f, -0.5f, -0.275f,  0.0f,  0.0f, 1.0f,

	0.325f, -0.5f,  -0.325f,  0.0f,  0.0f,  -1.0f,
	0.275f, -0.5f,  -0.325f,  0.0f,  0.0f,  -1.0f,
	0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  -1.0f,
	0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  -1.0f,
	0.325f,  0.4f,  -0.325f,  0.0f,  0.0f,  -1.0f,
	0.325f, -0.5f,  -0.325f,  0.0f,  0.0f,  -1.0f,

	0.325f,  0.4f,  -0.325f, 1.0f,  0.0f,  0.0f,
	0.325f,  0.4f, -0.275f, 1.0f,  0.0f,  0.0f,
	0.325f, -0.5f, -0.275f, 1.0f,  0.0f,  0.0f,
	0.325f, -0.5f, -0.275f, 1.0f,  0.0f,  0.0f,
	0.325f, -0.5f,  -0.325f, 1.0f,  0.0f,  0.0f,
	0.325f,  0.4f,  -0.325f, 1.0f,  0.0f,  0.0f,

	0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,
	0.275f,  0.4f, -0.275f,  0.0f,  0.0f,  0.0f,
	0.275f, -0.5f, -0.275f,  0.0f,  0.0f,  0.0f,
	0.275f, -0.5f, -0.275f,  0.0f,  0.0f,  0.0f,
	0.275f, -0.5f,  -0.325f,  0.0f,  0.0f,  0.0f,
	0.275f,  0.4f,  -0.325f,  0.0f,  0.0f,  0.0f,

	0.325f, -0.5f, -0.275f,  0.0f, -1.0f,  0.0f,
	0.275f, -0.5f, -0.275f,  0.0f, -1.0f,  0.0f,
	0.275f, -0.5f,  -0.325f,  0.0f, -1.0f,  0.0f,
	0.275f, -0.5f,  -0.325f,  0.0f, -1.0f,  0.0f,
	0.325f, -0.5f,  -0.325f,  0.0f, -1.0f,  0.0f,
	0.325f, -0.5f, -0.275f,  0.0f, -1.0f,  0.0f,

	0.325f,  0.4f, -0.275f,  0.0f,  1.0f,  0.0f,
	0.275f,  0.4f, -0.275f,  0.0f,  1.0f,  0.0f,
	0.275f,  0.4f,  -0.325f,  0.0f,  1.0f,  0.0f,
	0.275f,  0.4f,  -0.325f,  0.0f,  1.0f,  0.0f,
	0.325f,  0.4f,  -0.325f,  0.0f,  1.0f,  0.0f,
	0.325f,  0.4f, -0.275f,  0.0f,  1.0f,  0.0f
	};


	GLfloat spin[] = {

		//right
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.4f, 0.1f,  0.55f,  0.0f,  0.0f,  1.0f,
		0.4f,  -0.1f,  0.5f,  0.0f,  0.0f,  1.0f,
		//left
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.4f, 0.1f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.4f,  -0.1f,  0.55f,  0.0f,  0.0f,  1.0f,
		//top
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.1f, 0.4f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.1f,  0.4f,  0.55f,  0.0f,  0.0f,  1.0f,
		//bottom
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.1f, -0.4f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.1f,  -0.4f,  0.55f,  0.0f,  0.0f,  1.0f,

		//topLeft
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.35f, 0.2f,  0.55f,  0.0f,  0.0f,  1.0f,
		-0.2f,  0.35f,  0.5f,  0.0f,  0.0f,  1.0f,

		//topRight
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.35f, 0.2f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.2f,  0.35f,  0.55f,  0.0f,  0.0f,  1.0f,

		//bottomLeft
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.35f, -0.2f,  0.5f,  0.0f,  0.0f,  1.0f,
		-0.2f,  -0.35f,  0.55f,  0.0f,  0.0f,  1.0f,

		//bottomRight
		0.0f, 0.0f,  0.5f,  0.0f,  0.0f,  1.0f,
		0.35f, -0.2f,  0.55f,  0.0f,  0.0f,  1.0f,
		0.2f,  -0.35f,  0.5f,  0.0f,  0.0f,  1.0f,


		-0.02f, -0.02f, 0.25f,  0.0f,  0.0f, -1.0f,
		0.02f, -0.02f, 0.25f,  0.0f,  0.0f, -1.0f,
		0.02f,  0.02f, 0.25f,  0.0f,  0.0f, -1.0f,
		0.02f,  0.02f, 0.25f,  0.0f,  0.0f, -1.0f,
		-0.02f,  0.02f, 0.25f,  0.0f,  0.0f, -1.0f,
		-0.02f, -0.02f, 0.25f,  0.0f,  0.0f, -1.0f,

		-0.02f, -0.02f,  0.55f,  0.0f,  0.0f,  1.0f,
		0.02f, -0.02f,  0.55f,  0.0f,  0.0f,  1.0f,
		0.02f,  0.02f,  0.55f,  0.0f,  0.0f,  1.0f,
		0.02f,  0.02f,  0.55f,  0.0f,  0.0f,  1.0f,
		-0.02f,  0.02f,  0.55f,  0.0f,  0.0f,  1.0f,
		-0.02f, -0.02f,  0.55f,  0.0f,  0.0f,  1.0f,

		-0.02f,  0.02f,  0.55f, -1.0f,  0.0f,  0.0f,
		-0.02f,  0.02f, 0.25f, -1.0f,  0.0f,  0.0f,
		-0.02f, -0.02f, 0.25f, -1.0f,  0.0f,  0.0f,
		-0.02f, -0.02f, 0.25f, -1.0f,  0.0f,  0.0f,
		-0.02f, -0.02f,  0.55f, -1.0f,  0.0f,  0.0f,
		-0.02f,  0.02f,  0.55f, -1.0f,  0.0f,  0.0f,

		0.02f,  0.02f,  0.55f,  1.0f,  0.0f,  0.0f,
		0.02f,  0.02f, 0.25f,  1.0f,  0.0f,  0.0f,
		0.02f, -0.02f, 0.25f,  1.0f,  0.0f,  0.0f,
		0.02f, -0.02f, 0.25f,  1.0f,  0.0f,  0.0f,
		0.02f, -0.02f,  0.55f,  1.0f,  0.0f,  0.0f,
		0.02f,  0.02f,  0.55f,  1.0f,  0.0f,  0.0f,

		-0.02f, -0.02f, 0.25f,  0.0f, -1.0f,  0.0f,
		0.02f, -0.02f, 0.25f,  0.0f, -1.0f,  0.0f,
		0.02f, -0.02f,  0.55f,  0.0f, -1.0f,  0.0f,
		0.02f, -0.02f,  0.55f,  0.0f, -1.0f,  0.0f,
		-0.02f, -0.02f,  0.55f,  0.0f, -1.0f,  0.0f,
		-0.02f, -0.02f, 0.25f,  0.0f, -1.0f,  0.0f,

		-0.02f,  0.02f, 0.25f,  0.0f,  1.0f,  0.0f,
		0.02f,  0.02f, 0.25f,  0.0f,  1.0f,  0.0f,
		0.02f,  0.02f,  0.55f,  0.0f,  1.0f,  0.0f,
		0.02f,  0.02f,  0.55f,  0.0f,  1.0f,  0.0f,
		-0.02f,  0.02f,  0.55f,  0.0f,  1.0f,  0.0f,
		-0.02f,  0.02f, 0.25f,  0.0f,  1.0f,  0.0f

	};

	GLfloat pForntBackRight[] = {

		//right
	0.3f, -0.5f, -0.05f,  0.0f,  0.0f, 1.0f,
	0.25f, -0.5f, -0.05f,  0.0f,  0.0f, 1.0f,
	0.25f,  0.4f, -0.05f,  0.0f,  0.0f, 1.0f,
	0.25f,  0.4f, -0.05f,  0.0f,  0.0f, 1.0f,
	0.3f,  0.4f, -0.05f,  0.0f,  0.0f, 1.0f,
	0.3f, -0.5f, -0.05f,  0.0f,  0.0f, 1.0f,

	0.3f, -0.5f,  -0.15f,  0.0f,  0.0f,  -1.0f,
	0.25f, -0.5f,  -0.15f,  0.0f,  0.0f,  -1.0f,
	0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  -1.0f,
	0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  -1.0f,
	0.3f,  0.4f,  -0.15f,  0.0f,  0.0f,  -1.0f,
	0.3f, -0.5f,  -0.15f,  0.0f,  0.0f,  -1.0f,

	0.3f,  0.4f,  -0.15f, 1.0f,  0.0f,  0.0f,
	0.3f,  0.4f, -0.05f, 1.0f,  0.0f,  0.0f,
	0.3f, -0.5f, -0.05f, 1.0f,  0.0f,  0.0f,
	0.3f, -0.5f, -0.05f, 1.0f,  0.0f,  0.0f,
	0.3f, -0.5f,  -0.15f, 1.0f,  0.0f,  0.0f,
	0.3f,  0.4f,  -0.15f, 1.0f,  0.0f,  0.0f,

	0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  0.0f,
	0.25f,  0.4f, -0.05f,  0.0f,  0.0f,  0.0f,
	0.25f, -0.5f, -0.05f,  0.0f,  0.0f,  0.0f,
	0.25f, -0.5f, -0.05f,  0.0f,  0.0f,  0.0f,
	0.25f, -0.5f,  -0.15f,  0.0f,  0.0f,  0.0f,
	0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  0.0f,

	0.3f, -0.5f, -0.05f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f, -0.05f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f,  -0.15f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f,  -0.15f,  0.0f, -1.0f,  0.0f,
	0.3f, -0.5f,  -0.15f,  0.0f, -1.0f,  0.0f,
	0.3f, -0.5f, -0.05f,  0.0f, -1.0f,  0.0f,

	0.3f,  0.4f, -0.05f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f, -0.05f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f,  -0.15f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f,  -0.15f,  0.0f,  1.0f,  0.0f,
	0.3f,  0.4f,  -0.15f,  0.0f,  1.0f,  0.0f,
	0.3f,  0.4f, -0.05f,  0.0f,  1.0f,  0.0f,



	0.3f, -0.5f, 0.15f,  0.0f,  0.0f, 1.0f,
	0.25f, -0.5f, 0.15f,  0.0f,  0.0f, 1.0f,
	0.25f,  0.4f, 0.15f,  0.0f,  0.0f, 1.0f,
	0.25f,  0.4f, 0.15f,  0.0f,  0.0f, 1.0f,
	0.3f,  0.4f, 0.15f,  0.0f,  0.0f, 1.0f,
	0.3f, -0.5f, 0.15f,  0.0f,  0.0f, 1.0f,

	0.3f, -0.5f,  0.05f,  0.0f,  0.0f,  -1.0f,
	0.25f, -0.5f,  0.05f,  0.0f,  0.0f,  -1.0f,
	0.25f,  0.4f,  0.05f,  0.0f,  0.0f,  -1.0f,
	0.25f,  0.4f,  0.05f,  0.0f,  0.0f,  -1.0f,
	0.3f,  0.4f,  0.05f,  0.0f,  0.0f,  -1.0f,
	0.3f, -0.5f,  0.05f,  0.0f,  0.0f,  -1.0f,

	0.3f,  0.4f,  0.05f, 1.0f,  0.0f,  0.0f,
	0.3f,  0.4f, 0.15f, 1.0f,  0.0f,  0.0f,
	0.3f, -0.5f, 0.15f, 1.0f,  0.0f,  0.0f,
	0.3f, -0.5f, 0.15f, 1.0f,  0.0f,  0.0f,
	0.3f, -0.5f,  0.05f, 1.0f,  0.0f,  0.0f,
	0.3f,  0.4f,  0.05f, 1.0f,  0.0f,  0.0f,

	0.25f,  0.4f,  0.05f,  0.0f,  0.0f,  0.0f,
	0.25f,  0.4f, 0.15f,  0.0f,  0.0f,  0.0f,
	0.25f, -0.5f, 0.15f,  0.0f,  0.0f,  0.0f,
	0.25f, -0.5f, 0.15f,  0.0f,  0.0f,  0.0f,
	0.25f, -0.5f,  0.05f,  0.0f,  0.0f,  0.0f,
	0.25f,  0.4f,  0.15f,  0.0f,  0.0f,  0.0f,

	0.3f, -0.5f, 0.15f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f, 0.15f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f,  0.05f,  0.0f, -1.0f,  0.0f,
	0.25f, -0.5f,  0.05f,  0.0f, -1.0f,  0.0f,
	0.3f, -0.5f,  0.05f,  0.0f, -1.0f,  0.0f,
	0.3f, -0.5f, 0.15f,  0.0f, -1.0f,  0.0f,

	0.3f,  0.4f, 0.15f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f, 0.15f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f,  0.05f,  0.0f,  1.0f,  0.0f,
	0.25f,  0.4f,  0.05f,  0.0f,  1.0f,  0.0f,
	0.3f,  0.4f,  0.05f,  0.0f,  1.0f,  0.0f,
	0.3f,  0.4f, 0.15f,  0.0f,  1.0f,  0.0f,

	//left

	-0.3f, -0.5f, -0.05f,  0.0f,  0.0f, 0.0f,
	-0.25f, -0.5f, -0.05f,  0.0f,  0.0f, 0.0f,
	-0.25f,  0.4f, -0.05f,  0.0f,  0.0f, 0.0f,
	-0.25f,  0.4f, -0.05f,  0.0f,  0.0f, 0.0f,
	-0.3f,  0.4f, -0.05f,  0.0f,  0.0f, 0.0f,
	-0.3f, -0.5f, -0.05f,  0.0f,  0.0f, 0.0f,

	-0.3f, -0.5f,  -0.15f,  0.0f,  0.0f,  -0.0f,
	-0.25f, -0.5f,  -0.15f,  0.0f,  0.0f,  -0.0f,
	-0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  -0.0f,
	-0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  -0.0f,
	-0.3f,  0.4f,  -0.15f,  0.0f,  0.0f,  -0.0f,
	-0.3f, -0.5f,  -0.15f,  0.0f,  0.0f,  -0.0f,

	-0.3f,  0.4f,  -0.15f, 0.0f,  0.0f,  0.0f,
	-0.3f,  0.4f, -0.05f, 0.0f,  0.0f,  0.0f,
	-0.3f, -0.5f, -0.05f, 0.0f,  0.0f,  0.0f,
	-0.3f, -0.5f, -0.05f, 0.0f,  0.0f,  0.0f,
	-0.3f, -0.5f,  -0.15f, 0.0f,  0.0f,  0.0f,
	-0.3f,  0.4f,  -0.15f, 0.0f,  0.0f,  0.0f,

	-0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  0.0f,
	-0.25f,  0.4f, -0.05f,  0.0f,  0.0f,  0.0f,
	-0.25f, -0.5f, -0.05f,  0.0f,  0.0f,  0.0f,
	-0.25f, -0.5f, -0.05f,  0.0f,  0.0f,  0.0f,
	-0.25f, -0.5f,  -0.15f,  0.0f,  0.0f,  0.0f,
	-0.25f,  0.4f,  -0.15f,  0.0f,  0.0f,  0.0f,

	-0.3f, -0.5f, -0.05f,  0.0f, -0.0f,  0.0f,
	-0.25f, -0.5f, -0.05f,  0.0f, -0.0f,  0.0f,
	-0.25f, -0.5f,  -0.15f,  0.0f, -0.0f,  0.0f,
	-0.25f, -0.5f,  -0.15f,  0.0f, -0.0f,  0.0f,
	-0.3f, -0.5f,  -0.15f,  0.0f, -0.0f,  0.0f,
	-0.3f, -0.5f, -0.05f,  0.0f, -0.0f,  0.0f,

	-0.3f,  0.4f, -0.05f,  0.0f, 0.0f,  0.0f,
	-0.25f,  0.4f, -0.05f,  0.0f, 0.0f,  0.0f,
	-0.25f,  0.4f,  -0.15f,  0.0f, 0.0f,  0.0f,
	-0.25f,  0.4f,  -0.15f,  0.0f, 0.0f,  0.0f,
	-0.3f,  0.4f,  -0.15f,  0.0f, 0.0f,  0.0f,
	-0.3f,  0.4f, -0.05f,  0.0f, 0.0f,  0.0f,



	-0.3f, -0.5f, 0.15f,  0.0f,  0.0f, 0.0f,
	-0.25f, -0.5f, 0.15f,  0.0f,  0.0f, 0.0f,
	-0.25f,  0.4f, 0.15f,  0.0f,  0.0f, 0.0f,
	-0.25f,  0.4f, 0.15f,  0.0f,  0.0f, 0.0f,
	-0.3f,  0.4f, 0.15f,  0.0f,  0.0f, 0.0f,
	-0.3f, -0.5f, 0.15f,  0.0f,  0.0f, 0.0f,

	-0.3f, -0.5f,  0.05f,  0.0f,  0.0f,  -0.0f,
	-0.25f, -0.5f,  0.05f,  0.0f,  0.0f,  -0.0f,
	-0.25f,  0.4f,  0.05f,  0.0f,  0.0f,  -0.0f,
	-0.25f,  0.4f,  0.05f,  0.0f,  0.0f,  -0.0f,
	-0.3f,  0.4f,  0.05f,  0.0f,  0.0f,  -0.0f,
	-0.3f, -0.5f,  0.05f,  0.0f,  0.0f,  -0.0f,

	-0.3f,  0.4f,  0.05f, 0.0f,  0.0f,  0.0f,
	-0.3f,  0.4f, 0.15f, 0.0f,  0.0f,  0.0f,
	-0.3f, -0.5f, 0.15f, 0.0f,  0.0f,  0.0f,
	-0.3f, -0.5f, 0.15f, 0.0f,  0.0f,  0.0f,
	-0.3f, -0.5f,  0.05f, 0.0f,  0.0f,  0.0f,
	-0.3f,  0.4f,  0.05f, 0.0f,  0.0f,  0.0f,

	-0.25f,  0.4f,  0.05f,  0.0f,  0.0f,  0.0f,
	-0.25f,  0.4f, 0.15f,  0.0f,  0.0f,  0.0f,
	-0.25f, -0.5f, 0.15f,  0.0f,  0.0f,  0.0f,
	-0.25f, -0.5f, 0.15f,  0.0f,  0.0f,  0.0f,
	-0.25f, -0.5f,  0.05f,  0.0f,  0.0f,  0.0f,
	-0.25f,  0.4f,  0.15f,  0.0f,  0.0f,  0.0f,

	-0.3f, -0.5f, 0.15f,  0.0f, -0.0f,  0.0f,
	-0.25f, -0.5f, 0.15f,  0.0f, -0.0f,  0.0f,
	-0.25f, -0.5f,  0.05f,  0.0f, -0.0f,  0.0f,
	-0.25f, -0.5f,  0.05f,  0.0f, -0.0f,  0.0f,
	-0.3f, -0.5f,  0.05f,  0.0f, -0.0f,  0.0f,
	-0.3f, -0.5f, 0.15f,  0.0f, -0.0f,  0.0f,

	-0.3f,  0.4f, 0.15f,  0.0f, 0.0f,  0.0f,
	-0.25f,  0.4f, 0.15f,  0.0f, 0.0f,  0.0f,
	-0.25f,  0.4f,  0.05f,  0.0f, 0.0f,  0.0f,
	-0.25f,  0.4f,  0.05f,  0.0f, 0.0f,  0.0f,
	-0.3f,  0.4f,  0.05f,  0.0f, 0.0f,  0.0f,
	-0.3f,  0.4f, 0.15f,  0.0f, 0.0f,  0.0f
	};

	// First, set the container's VAO (and VBO)
	GLuint VBO, containerVAO;
	glGenVertexArrays(1, &containerVAO);
	glGenBuffers(1, &VBO);

	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(spin), spin, GL_STATIC_DRAW);

	glBindVertexArray(containerVAO);
	// Position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
	glEnableVertexAttribArray(0);
	// Normal attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);


	GLuint VBOs[20], VAOs[20];
	glGenVertexArrays(20, VAOs); // the address-of operator (&) is not needed here, as the array name is a pointer type 
	glGenBuffers(20, VBOs);





	glBindVertexArray(VAOs[0]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	glBindVertexArray(VAOs[1]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(middle), middle, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	glBindVertexArray(VAOs[2]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[2]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(dome), dome, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	glBindVertexArray(VAOs[3]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[3]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pillarLeftFront), pillarLeftFront, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	glBindVertexArray(VAOs[4]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[4]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pillarRightFront), pillarRightFront, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	glBindVertexArray(VAOs[5]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[5]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pillarLeftBack), pillarLeftBack, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	glBindVertexArray(VAOs[6]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[6]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pillarRightBack), pillarRightBack, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);


	glBindVertexArray(VAOs[7]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[7]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(pForntBackRight), pForntBackRight, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);








	glBindVertexArray(VAOs[19]);
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[19]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(cubeVertices), cubeVertices, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
	glBindVertexArray(0);

	// Then, we set the light's VAO (VBO stays the same. After all, the vertices are the same for the light object (also a 3D cube))
	GLuint lightVAO;
	glGenVertexArrays(1, &lightVAO);
	glBindVertexArray(lightVAO);
	// We only need to bind to the VBO (to link it with glVertexAttribPointer), no need to fill it; the VBO's data already contains all we need.
	glBindBuffer(GL_ARRAY_BUFFER, VBOs[19]);
	// Set the vertex attributes (only position data for the lamp))
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0); // Note that we skip over the normal vectors
	glEnableVertexAttribArray(0);
	glBindVertexArray(0);


	// Game loop
	while (!glfwWindowShouldClose(window))
	{
		// Calculate deltatime of current frame
		GLfloat currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;

		// Check if any events have been activiated (key pressed, mouse moved etc.) and call corresponding response functions
		glfwPollEvents();
		do_movement();

		// Clear the colorbuffer
		glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// Use cooresponding shader when setting uniforms/drawing objects
		glUseProgram(shaderProgram);
		GLint objectColorLoc = glGetUniformLocation(shaderProgram, "objectColor");
		GLint lightColorLoc = glGetUniformLocation(shaderProgram, "lightColor");
		GLint lightPosLoc = glGetUniformLocation(shaderProgram, "lightPos");
		GLint viewPosLoc = glGetUniformLocation(shaderProgram, "viewPos");
		glUniform3f(objectColorLoc, 1.0f, 0.0f, 0.0f);
		glUniform3f(lightColorLoc, 1.0f, 1.0f, 1.0f);
		glUniform3f(lightPosLoc, lightPos.x, lightPos.y, lightPos.z);
		glUniform3f(viewPosLoc, cameraPos.x, cameraPos.y, cameraPos.z);



		// Create camera transformations

		glm::mat4 view;
		glm::mat4 projection;
		view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
		projection = glm::perspective(45.0f, (GLfloat)WIDTH / (GLfloat)HEIGHT, 0.1f, 100.0f);

		// Get the uniform locations
		GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
		GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
		GLint projLoc = glGetUniformLocation(shaderProgram, "projection");
		// Pass the matrices to the shader
		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));

		// Draw the container (using container's vertex attributes)
		glBindVertexArray(containerVAO);
		glm::mat4 model;
		model = glm::rotate(model, (GLfloat)glfwGetTime() * 0.9f, glm::vec3(0.0f, 0.0f, 1.0f));
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		glDrawArrays(GL_TRIANGLES, 0, 120);
		glBindVertexArray(0);



		// Also draw the lamp object, again binding the appropriate shader
		glUseProgram(lampshader);
		// Get location objects for the matrices on the lamp shader (these could be different on a different shader)
		modelLoc = glGetUniformLocation(lampshader, "model");
		viewLoc = glGetUniformLocation(lampshader, "view");
		projLoc = glGetUniformLocation(lampshader, "projection");
		// Set matrices
		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));
		model = glm::mat4();
		model = glm::translate(model, lightPos);
		model = glm::scale(model, glm::vec3(0.1f)); // Make it a smaller cube
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		// Draw the light object (using light's vertex attributes)
		glBindVertexArray(lightVAO);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glBindVertexArray(0);


		glUseProgram(shaderProgram);
		GLint transformLoc;

		glm::mat4 model1;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s1 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model1));
		glBindVertexArray(VAOs[0]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);


		glm::mat4 model2;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s2 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model2));
		glBindVertexArray(VAOs[1]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);


		glm::mat4 model3;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s3 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model3));
		glBindVertexArray(VAOs[2]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);


		glm::mat4 model4;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s4 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model4));
		glBindVertexArray(VAOs[3]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);


		glm::mat4 model5;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s5 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model5));
		glBindVertexArray(VAOs[4]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);


		glm::mat4 model6;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s6 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model6));
		glBindVertexArray(VAOs[5]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);


		glm::mat4 model7;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s7 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model7));
		glBindVertexArray(VAOs[6]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 20);

		glm::mat4 model8;
		transformLoc = glGetUniformLocation(shaderProgram, "model");
		float s8 = (float)glfwGetTime();
		glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(model8));
		glBindVertexArray(VAOs[7]);
		glDrawArrays(GL_TRIANGLES, 0, 3 * 200);





		// Swap the screen buffers
		glfwSwapBuffers(window);
	}

	// Terminate GLFW, clearing any resources allocated by GLFW.
	glfwTerminate();
	return 0;
}

// Is called whenever a key is pressed/released via GLFW
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mode)
{
	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
		glfwSetWindowShouldClose(window, GL_TRUE);
	if (key >= 0 && key < 1024)
	{
		if (action == GLFW_PRESS)
			keys[key] = true;
		else if (action == GLFW_RELEASE)
			keys[key] = false;
	}
}

void do_movement()
{
	// Camera controls
	GLfloat cameraSpeed = 1.0f * deltaTime;
	//moveForward
	if (keys[GLFW_KEY_W])
		cameraPos += cameraSpeed * cameraFront;
	//moveBackward
	if (keys[GLFW_KEY_S])
		cameraPos -= cameraSpeed * cameraFront;
	//moveLeft
	if (keys[GLFW_KEY_A])
		cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	//moveRight
	if (keys[GLFW_KEY_D])
		cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	//moveUp
	if (keys[GLFW_KEY_I])
		cameraPos += cameraSpeed * cameraUp;
	//moveDown
	if (keys[GLFW_KEY_K])
		cameraPos -= cameraSpeed * cameraUp;
	//rotateRight
	if (keys[GLFW_KEY_L]) {
		float yawAngle = -25.0f * deltaTime;
		glm::mat4 rotationMatrix = glm::rotate(glm::mat4(1.0f), glm::radians(yawAngle), cameraUp);
		cameraFront = glm::mat3(rotationMatrix) * cameraFront;
		cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	}
	//rotateLeft
	if (keys[GLFW_KEY_J]) {
		float yawAngle = 25.0f * deltaTime;
		glm::mat4 rotationMatrix = glm::rotate(glm::mat4(1.0f), glm::radians(yawAngle), cameraUp);
		cameraFront = glm::mat3(rotationMatrix) * cameraFront;
		cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	}
}

bool firstMouse = true;
void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (firstMouse)
	{
		lastX = (GLfloat)xpos;
		lastY = (GLfloat)ypos;
		firstMouse = false;
	}

	GLfloat xoffset = (GLfloat)xpos - lastX;
	GLfloat yoffset = lastY - (GLfloat)ypos; // Reversed since y-coordinates go from bottom to left
	lastX = (GLfloat)xpos;
	lastY = (GLfloat)ypos;

	GLfloat sensitivity = (GLfloat)0.05;	// Change this value to your liking
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch += yoffset;

	// Make sure that when pitch is out of bounds, screen doesn't get flipped
	if (pitch > 89.0f)
		pitch = 89.0f;
	if (pitch < -89.0f)
		pitch = -89.0f;

	glm::vec3 front;
	front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	front.y = sin(glm::radians(pitch));
	front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
	cameraFront = glm::normalize(front);
}