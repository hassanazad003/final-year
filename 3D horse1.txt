// Code adapted from www.learnopengl.com, www.glfw.org

#include <iostream>
#define GLEW_STATIC
#include <GL/glew.h>
#include <GLFW/glfw3.h>

// GLM Mathematics
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/matrix_interpolation.hpp>
#include <glm/gtc/constants.hpp>

#include "shader.h"

// Window dimensions
const GLuint WIDTH = 640, HEIGHT = 640;

int main(void)
{
	//++++create a glfw window+++++++++++++++++++++++++++++++++++++++
	GLFWwindow* window;

	if (!glfwInit()) //Initialize the library
		return -1;

	window = glfwCreateWindow(WIDTH, HEIGHT, "OpenGL Window", NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	glfwMakeContextCurrent(window);//Make the window's context current
	
	//++++Initialize GLEW to setup the OpenGL Function pointers+++++++
	glewExperimental = GL_TRUE;
	glewInit();

	//++++Define the viewport dimensions++++++++++++++++++++++++++++
	glViewport(0, 0, HEIGHT, HEIGHT);

	// Setup OpenGL options
	glEnable(GL_DEPTH_TEST);

	//++++++++++Set up vertex data (and buffer(s)) and attribute pointers+++++++++
	GLfloat vertices[] = {

		//2sideTrianglesNo1
		 0.4f,  -0.2f, 0.2f, 0.6f, 0.4f, 0.2f,  
	     0.4f, 0.2f, 0.2f, 0.6f, 0.4f, 0.2f,
         0.0f, 0.2f, 0.2f, 0.6f, 0.4f, 0.2f,
		 -0.2f,  0.0f, 0.2f, 0.6f, 0.4f, 0.2f,
	     -0.2f, 0.4f, 0.2f, 0.6f, 0.4f, 0.2f,
         0.2f, 0.0f, 0.2f, 0.6f, 0.4f, 0.2f,

		 //frontLegsNo1
		 -0.2f,  0.0f, 0.2f, 0.6f, 0.4f, 0.2f,
		 -0.2f, -0.2f, 0.2f, 0.6f, 0.4f, 0.2f,
		  0.0f, 0.0f, 0.2f, 0.6f, 0.4f, 0.2f,

		 //faceNo1
		 -0.2f,  0.2f, 0.2f, 0.5f, 0.3f, 0.1f,
		 -0.2f, 0.4f, 0.2f, 0.5f, 0.3f, 0.1f,
		 -0.4f, 0.2f, 0.23f, 0.5f, 0.3f, 0.1f,

		 //faceNo1
		 -0.2f,  0.2f, 0.3f, 0.5f, 0.3f, 0.1f,
		 -0.2f, 0.4f, 0.3f, 0.5f, 0.3f, 0.1f,
		 -0.4f, 0.2f, 0.27f, 0.5f, 0.3f, 0.1f,

		 //tailNo1.1
		 0.6f,  0.15f, 0.23f, 0.5f, 0.3f, 0.1f,
		 0.5f, 0.1f, 0.23f, 0.5f, 0.3f, 0.1f,
		 0.4f, 0.2f, 0.23f, 0.5f, 0.3f, 0.1f,

		 //tailNo1.2
		 0.6f,  0.15f, 0.23f, 0.5f, 0.3f, 0.1f,
		 0.5f, 0.1f, 0.23f, 0.5f, 0.3f, 0.1f,
		 0.7f, 0.05f, 0.23f, 0.5f, 0.3f, 0.1f,

		 //2sideTrianglesNo2
		 0.4f,  -0.2f, 0.3f, 0.6f, 0.4f, 0.4f,
		 0.4f, 0.2f, 0.3f, 0.6f, 0.4f, 0.4f,
		 0.0f, 0.2f, 0.3f, 0.6f, 0.4f, 0.4f,
		 -0.2f,  0.0f, 0.3f, 0.6f, 0.4f, 0.4f,
		 -0.2f, 0.4f, 0.3f, 0.6f, 0.4f, 0.4f,
		 0.2f, 0.0f, 0.3f, 0.6f, 0.4f, 0.4f,

		 //frontLegsNo2
		 -0.2f,  0.0f, 0.3f, 0.6f, 0.4f, 0.4f,
		 -0.2f, -0.2f, 0.3f, 0.6f, 0.4f, 0.4f,
		  0.0f, 0.0f, 0.3f, 0.6f, 0.4f, 0.4f,

		  //tailNo2.1
		  0.6f,  0.15f, 0.27f, 0.5f, 0.3f, 0.1f,
		  0.5f, 0.1f, 0.27f, 0.5f, 0.3f, 0.1f,
		  0.4f, 0.2f, 0.27f, 0.5f, 0.3f, 0.1f,

		  //tailNo2.2
		  0.6f,  0.15f, 0.27f, 0.5f, 0.3f, 0.1f,
		  0.5f, 0.1f, 0.27f, 0.5f, 0.3f, 0.1f,
		  0.7f, 0.05f, 0.27f, 0.5f, 0.3f, 0.1f,

		  //backSideRightBackLeg
		  0.4f, 0.2f, 0.3f, 0.6f, 0.4f, 0.8f,
		  0.4f, 0.2f, 0.2f, 0.6f, 0.4f, 0.8f,
	      0.4f, -0.2f, 0.2f, 0.6f, 0.4f, 0.8f,
		  //backSideLeftBackLeg
	 	  0.4f, 0.2f, 0.3f, 0.6f, 0.4f, 0.8f,
		  0.4f, 0.0f, 0.25f, 0.6f, 0.4f, 0.8f,
		  0.4f, -0.2f, 0.3f, 0.6f, 0.4f, 0.8f,

		  //backSideRightFrontLeg
		  0.4f, 0.0f, 0.25f, 0.0f, 0.4f, 0.2f,
		  0.4f, -0.2f, 0.2f, 0.0f, 0.4f, 0.3f,
		  0.2f, 0.0f, 0.2f, 0.0f, 0.4f, 0.3f,

		  //backSideLeftFrontLeg
		  0.4f, 0.0f, 0.25f, 0.0f, 0.4f, 0.7f,
		  0.4f, -0.2f, 0.3f, 0.0f, 0.4f, 0.7f,
		  0.2f, 0.0f, 0.3f, 0.0f, 0.4f, 0.7f,

		  //frontSideRightFrontLeg
		  -0.2f, 0.0f, 0.25f, 0.0f, 0.4f, 0.5f,
		  -0.2f, -0.2f, 0.2f, 0.0f, 0.4f, 0.5f,
		  0.0f, 0.0f, 0.2f, 0.0f, 0.4f, 0.5f,

		  //frontSideLeftFrontLeg
		  -0.2f, 0.0f, 0.25f, 0.0f, 0.1f, 0.7f,
		  -0.2f, -0.2f, 0.3f, 0.0f, 0.1f, 0.7f,
		  0.0f, 0.0f, 0.3f, 0.0f, 0.1f, 0.7f,

		  //backSideRightBackLeg
		  -0.2f, 0.2f, 0.3f, 0.6f, 0.4f, 0.8f,
		  -0.2f, 0.2f, 0.2f, 0.6f, 0.4f, 0.8f,
		  -0.2f, -0.2f, 0.2f, 0.6f, 0.4f, 0.8f,
		  //backSideLeftBackLeg
		  -0.2f, 0.2f, 0.3f, 0.6f, 0.4f, 0.8f,
		  -0.2f, 0.0f, 0.25f, 0.6f, 0.4f, 0.8f,
		  -0.2f, -0.2f, 0.3f, 0.6f, 0.4f, 0.8f,



		  //frontLegsUnderBelly
		  -0.2f, 0.0f, 0.25f, 1.0f, 0.0f, 1.0f,
		   0.0f, 0.0f, 0.2f, 1.0f, 0.0f, 1.0f,
		   0.0f, 0.0f, 0.3f, 1.0f, 0.0f, 1.0f,

		   //backLegsUnderBelly
		   0.4f, 0.0f, 0.25f, 1.0f, 0.0f, 1.0f,
		   0.2f, 0.0f, 0.2f, 1.0f, 0.0f, 1.0f,
		   0.2f, 0.0f, 0.3f, 1.0f, 0.0f, 1.0f,

		   //underBellyTriangle1
		   0.2f, 0.0f, 0.3f, 1.0f, 1.0f, 1.0f,
		   0.0f, 0.0f, 0.2f, 1.0f, 1.0f, 1.0f,
		   0.0f, 0.0f, 0.3f, 1.0f, 1.0f, 1.0f,

		   //underBellyTriangle1
		   0.2f, 0.0f, 0.3f, 1.0f, 1.0f, 0.0f,
		   0.2f, 0.0f, 0.2f, 1.0f, 1.0f, 0.0f,
		   0.0f, 0.0f, 0.2f, 1.0f, 1.0f, 0.0f,

		   //backTriangle1
		   0.2f, 0.2f, 0.3f, 1.0f, 1.0f, 1.0f,
		   0.0f, 0.2f, 0.2f, 1.0f, 1.0f, 1.0f,
	       0.0f, 0.2f, 0.3f, 1.0f, 1.0f, 1.0f,

		   //backTriangle2
		   0.2f, 0.2f, 0.3f, 1.0f, 1.0f, 0.0f,
           0.2f, 0.2f, 0.2f, 1.0f, 1.0f, 0.0f,
		   0.0f, 0.2f, 0.2f, 1.0f, 1.0f, 0.0f,

		   //backTriangle3
		   0.4f, 0.2f, 0.3f, 1.0f, 1.0f, 1.0f,
		   0.2f, 0.2f, 0.2f, 1.0f, 1.0f, 1.0f,
		   0.2f, 0.2f, 0.3f, 1.0f, 1.0f, 1.0f,

		   //backTriangle4
		   0.4f, 0.2f, 0.3f, 1.0f, 1.0f, 0.0f,
		   0.4f, 0.2f, 0.2f, 1.0f, 1.0f, 0.0f,
		   0.2f, 0.2f, 0.2f, 1.0f, 1.0f, 0.0f,

		   //neckTriangle3
		   0.0f, 0.2f, 0.3f, 1.0f, 1.0f, 1.0f,
		   -0.2f, 0.4f, 0.2f, 1.0f, 1.0f, 1.0f,
		   -0.2f, 0.4f, 0.3f, 1.0f, 1.0f, 1.0f,

		   //neckTriangle4
		   0.0f, 0.2f, 0.3f, 1.0f, 1.0f, 0.0f,
		   0.0f, 0.2f, 0.2f, 1.0f, 1.0f, 0.0f,
	       -0.2f, 0.4f, 0.2f, 1.0f, 1.0f, 0.0f,

		   //underFaceTriangle1
		   -0.2f, 0.2f, 0.3f, 0.0f, 0.0f, 1.0f,
		   -0.2f, 0.2f, 0.2f, 0.0f, 0.0f, 1.0f,
		   -0.4f, 0.2f, 0.23f, 0.0f, 0.0f, 1.0f,

			//underFaceTriangle1
		   -0.2f, 0.2f, 0.3f, 0.8f, 0.0f, 1.0f,
		   -0.4f, 0.2f, 0.27f, 0.8f, 0.0f, 1.0f,
		   -0.4f, 0.2f, 0.23f, 0.8f, 0.0f, 1.0f,

			//topFaceTriangle1
		   -0.2f, 0.4f, 0.3f, 0.0f, 0.0f, 1.0f,
		   -0.2f, 0.4f, 0.2f, 0.0f, 0.0f, 1.0f,
		   -0.4f, 0.2f, 0.23f, 0.0f, 0.0f, 1.0f,

		    //topFaceTriangle1
		   -0.2f, 0.4f, 0.3f, 0.8f, 0.0f, 1.0f,
		   -0.4f, 0.2f, 0.27f, 0.8f, 0.0f, 1.0f,
		   -0.4f, 0.2f, 0.23f, 0.8f, 0.0f, 1.0f,




	};

	GLuint VBO, VAO;
	glGenVertexArrays(1, &VAO);
	glGenBuffers(1, &VBO);

    // ================================
    // buffer setup
    // ===============================
    glBindVertexArray(VAO); 
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);	// Vertex attributes stay the same
    glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat))); // Color attribute
	glEnableVertexAttribArray(1);
    glBindVertexArray(0);

	//++++++++++Build and compile shader program+++++++++++++++++++++
	GLuint shaderProgram = initShader("vert.glsl","frag.glsl");

	//++++++++++++++++++++++++++++++++++++++++++++++
	/* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		/* Render here */
		glClearColor(0.2f, 0.3f, 0.2f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// Draw the cube
		// use shader
		glUseProgram(shaderProgram);

		// Create transformations
		glm::mat4 model;
		glm::mat4 view;
		glm::mat4 projection;
		//model = glm::mat4();
		model = glm::rotate(model, (GLfloat)glfwGetTime() * 1.0f, glm::vec3(0.0f, 1.0f, 0.0f));//spin
		
		view = glm::lookAt(glm::vec3(0.0f, 0.0f, 1.0f),
						   glm::vec3(0.0f, 0.0f, 0.0f),
			               glm::vec3(0.0f, 1.0f, 0.0f));
		projection = glm::perspective(45.0f, (GLfloat)WIDTH / (GLfloat)HEIGHT, 0.1f, 100.0f);

		// Get their uniform location
		GLint modelLoc = glGetUniformLocation(shaderProgram, "model");
		GLint viewLoc = glGetUniformLocation(shaderProgram, "view");
		GLint projLoc = glGetUniformLocation(shaderProgram, "projection");
		// Pass them to the shaders
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));
		glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(view));
		glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(projection));

		// draw object
		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLES, 0, 3*40);
	
		glBindVertexArray(0);

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();
	}
	// Properly de-allocate all resources once they've outlived their purpose
	glDeleteVertexArrays(1, &VAO);
	glDeleteBuffers(1, &VBO);

	glfwTerminate();
	return 0;
}